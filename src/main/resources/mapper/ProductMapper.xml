<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.snownilight.backtowork.mapper.ProductMapper">

    <resultMap id="ProductDetailMap" type="com.snownilight.backtowork.model.vo.ProductDetailVO">
        <!-- 產品基本資訊 -->
        <result property="id" column="product_id"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
        
        <!-- 商品項目資訊 -->
        <result property="price" column="price"/>
        <result property="stock" column="stock"/>
        <result property="status" column="status"/>
        <result property="itemCreatedAt" column="item_created_at"/>
        <result property="itemUpdatedAt" column="item_updated_at"/>
    </resultMap>


    <select id="selectProductDetailById" resultMap="ProductDetailMap">
        SELECT
            p.id AS product_id,
            p.name,
            p.description,
            i.price,
            i.stock,
            i.status,
            i.created_at AS item_created_at,
            i.updated_at AS item_updated_at
        FROM products p
        LEFT JOIN product_items i ON p.id = i.product_id
        WHERE p.id = #{id}
    </select>

    <select id="selectProducts" parameterType="com.snownilight.backtowork.model.dto.PageRequest" resultMap="ProductDetailMap">
        SELECT
            p.id AS product_id,
            p.name,
            p.description,
            i.price,
            i.stock,
            i.status,
            i.created_at AS item_created_at,
            i.updated_at AS item_updated_at
        FROM products p
        LEFT JOIN product_items i ON p.id = i.product_id
        <where>
            <if test="search != null and search != ''">
                (p.name LIKE CONCAT('%', #{search}, '%') OR p.description LIKE CONCAT('%', #{search}, '%'))
            </if>
        </where>
        <choose>
            <when test="sortBy != null and sortBy != ''">
                ORDER BY ${sortBy} 
                <choose>
                    <when test="sortOrder != null and sortOrder.toUpperCase() == 'ASC'">ASC</when>
                    <otherwise>DESC</otherwise>
                </choose>
            </when>
            <otherwise>
                ORDER BY p.id 
                <choose>
                    <when test="sortOrder != null and sortOrder.toUpperCase() == 'ASC'">ASC</when>
                    <otherwise>DESC</otherwise>
                </choose>
            </otherwise>
        </choose>
        LIMIT #{size} OFFSET #{offset};
    </select>

    <!-- 計算總筆數 -->
    <select id="countProducts" parameterType="com.snownilight.backtowork.model.dto.PageRequest" resultType="long">
        SELECT COUNT(*) 
        FROM products p
        <where>
            <if test="search != null and search != ''">
                (p.name LIKE CONCAT('%', #{search}, '%') 
                 OR p.description LIKE CONCAT('%', #{search}, '%'))
            </if>
        </where>
    </select>

    <insert id="insertProduct" parameterType="com.snownilight.backtowork.model.dto.CreateOrUpdateProduct" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO products (name, description)
        VALUES (#{name}, #{description});
    </insert>

    <insert id="insertProductItem" parameterType="com.snownilight.backtowork.model.dto.CreateOrUpdateProduct">
        INSERT INTO product_items (product_id, price, stock, status)
        VALUES (#{id}, #{price}, #{stock}, #{status});
    </insert>

    <update id="updateProductInfo" parameterType="com.snownilight.backtowork.model.dto.UpdateProductInfo">
        UPDATE products
        SET name = #{name}, description = #{description}
        WHERE id = #{id};
    </update>

    <update id="updateProductItem" parameterType="com.snownilight.backtowork.model.dto.UpdateProductItem">
        UPDATE product_items
        SET price = #{price}, stock = #{stock}, status = #{status}
        WHERE product_id = #{id};
    </update>

    <update id="updateProductStatus">
        UPDATE product_items
        SET status = #{status}
        WHERE product_id = #{id}
    </update>

    <!-- 刪除商品項目 -->
    <delete id="deleteProductItemByProductId" parameterType="long">
        DELETE FROM product_items
        WHERE product_id = #{id};
    </delete>

    <!-- 刪除商品基本資訊 -->
    <delete id="deleteProductById" parameterType="long">
        DELETE FROM products
        WHERE id = #{id};
    </delete>

</mapper>